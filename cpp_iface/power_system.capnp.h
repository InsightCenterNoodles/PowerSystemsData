// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: power_system.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b2a62ab97494c1a4);
CAPNP_DECLARE_SCHEMA(d92d2cb960f291e1);
enum class GeneratorType_d92d2cb960f291e1: uint16_t {
  PHOTOVOLTAIC,
  WIND_TURBINE,
  HYDROELECTRIC,
  GEOTHERMAL,
  BIOMASS,
  DIESEL_GENERATOR,
  COAL_PLANT,
  NATURAL_GAS_TURBINE,
  NUCLEAR_REACTOR,
  BATTERY,
  SUPERCAPACITOR,
  FLYWHEEL,
  FUEL_CELL,
  COGENERATION,
};
CAPNP_DECLARE_ENUM(GeneratorType, d92d2cb960f291e1);
CAPNP_DECLARE_SCHEMA(b580cb4d916a440c);
CAPNP_DECLARE_SCHEMA(b061391f5f413875);
CAPNP_DECLARE_SCHEMA(eb656c164e6df477);
CAPNP_DECLARE_SCHEMA(88ad8d80d51277ce);
CAPNP_DECLARE_SCHEMA(f2caa0ba277d0648);
CAPNP_DECLARE_SCHEMA(f84dadfd27d9ebd1);
CAPNP_DECLARE_SCHEMA(f4388939a1a54117);
CAPNP_DECLARE_SCHEMA(c55c7b9471811cae);

}  // namespace schemas
}  // namespace capnp


struct GeneratorState {
  GeneratorState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b2a62ab97494c1a4, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::GeneratorType_d92d2cb960f291e1 GeneratorType;

struct Generator {
  Generator() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b580cb4d916a440c, 7, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TransformerState {
  TransformerState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b061391f5f413875, 6, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Transformer {
  Transformer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eb656c164e6df477, 7, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LineState {
  LineState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88ad8d80d51277ce, 11, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Line {
  Line() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f2caa0ba277d0648, 15, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FloorPlan {
  FloorPlan() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    IMAGE_EMBEDDED,
    IMAGE_U_R_L,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f84dadfd27d9ebd1, 5, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Annotation {
  Annotation() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    FIXED_CONTENT,
    TIMESERIES_CONTENT,
    IMAGE_EMBEDDED,
    IMAGE_U_R_L,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4388939a1a54117, 5, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PowerSystemDataset {
  PowerSystemDataset() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c55c7b9471811cae, 0, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class GeneratorState::Reader {
public:
  typedef GeneratorState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getVoltA() const;

  inline float getVoltB() const;

  inline float getVoltC() const;

  inline float getAngleA() const;

  inline float getAngleB() const;

  inline float getAngleC() const;

  inline float getReal() const;

  inline float getReact() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GeneratorState::Builder {
public:
  typedef GeneratorState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getVoltA();
  inline void setVoltA(float value);

  inline float getVoltB();
  inline void setVoltB(float value);

  inline float getVoltC();
  inline void setVoltC(float value);

  inline float getAngleA();
  inline void setAngleA(float value);

  inline float getAngleB();
  inline void setAngleB(float value);

  inline float getAngleC();
  inline void setAngleC(float value);

  inline float getReal();
  inline void setReal(float value);

  inline float getReact();
  inline void setReact(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GeneratorState::Pipeline {
public:
  typedef GeneratorState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Generator::Reader {
public:
  typedef Generator Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasFeeder() const;
  inline  ::capnp::Text::Reader getFeeder() const;

  inline bool hasPhases() const;
  inline  ::capnp::Text::Reader getPhases() const;

  inline double getPositionX() const;

  inline double getPositionY() const;

  inline bool hasData() const;
  inline  ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>::Reader getData() const;

  inline double getVoltageDivisor() const;

  inline double getWattageDivisor() const;

  inline double getVarsDivisor() const;

  inline double getAlternatePositionX() const;

  inline double getAlternatePositionY() const;

  inline bool hasGeneratorTypes() const;
  inline  ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>::Reader getGeneratorTypes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Generator::Builder {
public:
  typedef Generator Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasFeeder();
  inline  ::capnp::Text::Builder getFeeder();
  inline void setFeeder( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFeeder(unsigned int size);
  inline void adoptFeeder(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFeeder();

  inline bool hasPhases();
  inline  ::capnp::Text::Builder getPhases();
  inline void setPhases( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPhases(unsigned int size);
  inline void adoptPhases(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPhases();

  inline double getPositionX();
  inline void setPositionX(double value);

  inline double getPositionY();
  inline void setPositionY(double value);

  inline bool hasData();
  inline  ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>::Builder getData();
  inline void setData( ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>> disownData();

  inline double getVoltageDivisor();
  inline void setVoltageDivisor(double value);

  inline double getWattageDivisor();
  inline void setWattageDivisor(double value);

  inline double getVarsDivisor();
  inline void setVarsDivisor(double value);

  inline double getAlternatePositionX();
  inline void setAlternatePositionX(double value);

  inline double getAlternatePositionY();
  inline void setAlternatePositionY(double value);

  inline bool hasGeneratorTypes();
  inline  ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>::Builder getGeneratorTypes();
  inline void setGeneratorTypes( ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>::Reader value);
  inline void setGeneratorTypes(::kj::ArrayPtr<const  ::GeneratorType> value);
  inline  ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>::Builder initGeneratorTypes(unsigned int size);
  inline void adoptGeneratorTypes(::capnp::Orphan< ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>> disownGeneratorTypes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Generator::Pipeline {
public:
  typedef Generator Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TransformerState::Reader {
public:
  typedef TransformerState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getVoltAFrom() const;

  inline float getVoltBFrom() const;

  inline float getVoltCFrom() const;

  inline float getVoltATo() const;

  inline float getVoltBTo() const;

  inline float getVoltCTo() const;

  inline  ::int32_t getTapA() const;

  inline  ::int32_t getTapB() const;

  inline  ::int32_t getTapC() const;

  inline  ::int32_t getTapChangesA() const;

  inline  ::int32_t getTapChangesB() const;

  inline  ::int32_t getTapChangesC() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TransformerState::Builder {
public:
  typedef TransformerState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getVoltAFrom();
  inline void setVoltAFrom(float value);

  inline float getVoltBFrom();
  inline void setVoltBFrom(float value);

  inline float getVoltCFrom();
  inline void setVoltCFrom(float value);

  inline float getVoltATo();
  inline void setVoltATo(float value);

  inline float getVoltBTo();
  inline void setVoltBTo(float value);

  inline float getVoltCTo();
  inline void setVoltCTo(float value);

  inline  ::int32_t getTapA();
  inline void setTapA( ::int32_t value);

  inline  ::int32_t getTapB();
  inline void setTapB( ::int32_t value);

  inline  ::int32_t getTapC();
  inline void setTapC( ::int32_t value);

  inline  ::int32_t getTapChangesA();
  inline void setTapChangesA( ::int32_t value);

  inline  ::int32_t getTapChangesB();
  inline void setTapChangesB( ::int32_t value);

  inline  ::int32_t getTapChangesC();
  inline void setTapChangesC( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TransformerState::Pipeline {
public:
  typedef TransformerState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Transformer::Reader {
public:
  typedef Transformer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasFeeder() const;
  inline  ::capnp::Text::Reader getFeeder() const;

  inline double getPositionX() const;

  inline double getPositionY() const;

  inline bool hasData() const;
  inline  ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>::Reader getData() const;

  inline bool hasToNode() const;
  inline  ::capnp::Text::Reader getToNode() const;

  inline bool hasFromNode() const;
  inline  ::capnp::Text::Reader getFromNode() const;

  inline double getVoltageDivisor() const;

  inline double getWattageDivisor() const;

  inline double getVarsDivisor() const;

  inline double getAlternatePositionX() const;

  inline double getAlternatePositionY() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Transformer::Builder {
public:
  typedef Transformer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasFeeder();
  inline  ::capnp::Text::Builder getFeeder();
  inline void setFeeder( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFeeder(unsigned int size);
  inline void adoptFeeder(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFeeder();

  inline double getPositionX();
  inline void setPositionX(double value);

  inline double getPositionY();
  inline void setPositionY(double value);

  inline bool hasData();
  inline  ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>::Builder getData();
  inline void setData( ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>> disownData();

  inline bool hasToNode();
  inline  ::capnp::Text::Builder getToNode();
  inline void setToNode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initToNode(unsigned int size);
  inline void adoptToNode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownToNode();

  inline bool hasFromNode();
  inline  ::capnp::Text::Builder getFromNode();
  inline void setFromNode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFromNode(unsigned int size);
  inline void adoptFromNode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFromNode();

  inline double getVoltageDivisor();
  inline void setVoltageDivisor(double value);

  inline double getWattageDivisor();
  inline void setWattageDivisor(double value);

  inline double getVarsDivisor();
  inline void setVarsDivisor(double value);

  inline double getAlternatePositionX();
  inline void setAlternatePositionX(double value);

  inline double getAlternatePositionY();
  inline void setAlternatePositionY(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Transformer::Pipeline {
public:
  typedef Transformer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LineState::Reader {
public:
  typedef LineState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getVoltAFrom() const;

  inline float getVoltBFrom() const;

  inline float getVoltCFrom() const;

  inline float getVoltATo() const;

  inline float getVoltBTo() const;

  inline float getVoltCTo() const;

  inline float getRealAFrom() const;

  inline float getRealBFrom() const;

  inline float getRealCFrom() const;

  inline float getRealATo() const;

  inline float getRealBTo() const;

  inline float getRealCTo() const;

  inline float getReactAFrom() const;

  inline float getReactBFrom() const;

  inline float getReactCFrom() const;

  inline float getReactATo() const;

  inline float getReactBTo() const;

  inline float getReactCTo() const;

  inline float getLineLoadRealA() const;

  inline float getLineLoadRealB() const;

  inline float getLineLoadRealC() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LineState::Builder {
public:
  typedef LineState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getVoltAFrom();
  inline void setVoltAFrom(float value);

  inline float getVoltBFrom();
  inline void setVoltBFrom(float value);

  inline float getVoltCFrom();
  inline void setVoltCFrom(float value);

  inline float getVoltATo();
  inline void setVoltATo(float value);

  inline float getVoltBTo();
  inline void setVoltBTo(float value);

  inline float getVoltCTo();
  inline void setVoltCTo(float value);

  inline float getRealAFrom();
  inline void setRealAFrom(float value);

  inline float getRealBFrom();
  inline void setRealBFrom(float value);

  inline float getRealCFrom();
  inline void setRealCFrom(float value);

  inline float getRealATo();
  inline void setRealATo(float value);

  inline float getRealBTo();
  inline void setRealBTo(float value);

  inline float getRealCTo();
  inline void setRealCTo(float value);

  inline float getReactAFrom();
  inline void setReactAFrom(float value);

  inline float getReactBFrom();
  inline void setReactBFrom(float value);

  inline float getReactCFrom();
  inline void setReactCFrom(float value);

  inline float getReactATo();
  inline void setReactATo(float value);

  inline float getReactBTo();
  inline void setReactBTo(float value);

  inline float getReactCTo();
  inline void setReactCTo(float value);

  inline float getLineLoadRealA();
  inline void setLineLoadRealA(float value);

  inline float getLineLoadRealB();
  inline void setLineLoadRealB(float value);

  inline float getLineLoadRealC();
  inline void setLineLoadRealC(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LineState::Pipeline {
public:
  typedef LineState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Line::Reader {
public:
  typedef Line Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasFeeder() const;
  inline  ::capnp::Text::Reader getFeeder() const;

  inline bool hasPhases() const;
  inline  ::capnp::Text::Reader getPhases() const;

  inline bool hasData() const;
  inline  ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>::Reader getData() const;

  inline bool hasToNode() const;
  inline  ::capnp::Text::Reader getToNode() const;

  inline bool hasFromNode() const;
  inline  ::capnp::Text::Reader getFromNode() const;

  inline double getLength() const;

  inline double getDistanceA() const;

  inline double getDistanceB() const;

  inline double getPositionStartX() const;

  inline double getPositionStartY() const;

  inline double getPositionEndX() const;

  inline double getPositionEndY() const;

  inline double getVoltageDivisor() const;

  inline double getWattageDivisor() const;

  inline double getVarsDivisor() const;

  inline double getMaxReal() const;

  inline double getAlternatePositionStartX() const;

  inline double getAlternatePositionStartY() const;

  inline double getAlternatePositionEndX() const;

  inline double getAlternatePositionEndY() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Line::Builder {
public:
  typedef Line Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasFeeder();
  inline  ::capnp::Text::Builder getFeeder();
  inline void setFeeder( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFeeder(unsigned int size);
  inline void adoptFeeder(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFeeder();

  inline bool hasPhases();
  inline  ::capnp::Text::Builder getPhases();
  inline void setPhases( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPhases(unsigned int size);
  inline void adoptPhases(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPhases();

  inline bool hasData();
  inline  ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>::Builder getData();
  inline void setData( ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>> disownData();

  inline bool hasToNode();
  inline  ::capnp::Text::Builder getToNode();
  inline void setToNode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initToNode(unsigned int size);
  inline void adoptToNode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownToNode();

  inline bool hasFromNode();
  inline  ::capnp::Text::Builder getFromNode();
  inline void setFromNode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFromNode(unsigned int size);
  inline void adoptFromNode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFromNode();

  inline double getLength();
  inline void setLength(double value);

  inline double getDistanceA();
  inline void setDistanceA(double value);

  inline double getDistanceB();
  inline void setDistanceB(double value);

  inline double getPositionStartX();
  inline void setPositionStartX(double value);

  inline double getPositionStartY();
  inline void setPositionStartY(double value);

  inline double getPositionEndX();
  inline void setPositionEndX(double value);

  inline double getPositionEndY();
  inline void setPositionEndY(double value);

  inline double getVoltageDivisor();
  inline void setVoltageDivisor(double value);

  inline double getWattageDivisor();
  inline void setWattageDivisor(double value);

  inline double getVarsDivisor();
  inline void setVarsDivisor(double value);

  inline double getMaxReal();
  inline void setMaxReal(double value);

  inline double getAlternatePositionStartX();
  inline void setAlternatePositionStartX(double value);

  inline double getAlternatePositionStartY();
  inline void setAlternatePositionStartY(double value);

  inline double getAlternatePositionEndX();
  inline void setAlternatePositionEndX(double value);

  inline double getAlternatePositionEndY();
  inline void setAlternatePositionEndY(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Line::Pipeline {
public:
  typedef Line Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FloorPlan::Reader {
public:
  typedef FloorPlan Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline double getLowerLeftX() const;

  inline double getLowerLeftY() const;

  inline double getUpperRightX() const;

  inline double getUpperRightY() const;

  inline bool isImageEmbedded() const;
  inline bool hasImageEmbedded() const;
  inline  ::capnp::Data::Reader getImageEmbedded() const;

  inline bool isImageURL() const;
  inline bool hasImageURL() const;
  inline  ::capnp::Text::Reader getImageURL() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FloorPlan::Builder {
public:
  typedef FloorPlan Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline double getLowerLeftX();
  inline void setLowerLeftX(double value);

  inline double getLowerLeftY();
  inline void setLowerLeftY(double value);

  inline double getUpperRightX();
  inline void setUpperRightX(double value);

  inline double getUpperRightY();
  inline void setUpperRightY(double value);

  inline bool isImageEmbedded();
  inline bool hasImageEmbedded();
  inline  ::capnp::Data::Builder getImageEmbedded();
  inline void setImageEmbedded( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initImageEmbedded(unsigned int size);
  inline void adoptImageEmbedded(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownImageEmbedded();

  inline bool isImageURL();
  inline bool hasImageURL();
  inline  ::capnp::Text::Builder getImageURL();
  inline void setImageURL( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initImageURL(unsigned int size);
  inline void adoptImageURL(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownImageURL();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FloorPlan::Pipeline {
public:
  typedef FloorPlan Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Annotation::Reader {
public:
  typedef Annotation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline double getPositionX() const;

  inline double getPositionY() const;

  inline bool isFixedContent() const;
  inline bool hasFixedContent() const;
  inline  ::capnp::Text::Reader getFixedContent() const;

  inline bool isTimeseriesContent() const;
  inline bool hasTimeseriesContent() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getTimeseriesContent() const;

  inline bool isImageEmbedded() const;
  inline bool hasImageEmbedded() const;
  inline  ::capnp::Data::Reader getImageEmbedded() const;

  inline bool isImageURL() const;
  inline bool hasImageURL() const;
  inline  ::capnp::Text::Reader getImageURL() const;

  inline double getAlternatePositionX() const;

  inline double getAlternatePositionY() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Annotation::Builder {
public:
  typedef Annotation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline double getPositionX();
  inline void setPositionX(double value);

  inline double getPositionY();
  inline void setPositionY(double value);

  inline bool isFixedContent();
  inline bool hasFixedContent();
  inline  ::capnp::Text::Builder getFixedContent();
  inline void setFixedContent( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFixedContent(unsigned int size);
  inline void adoptFixedContent(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFixedContent();

  inline bool isTimeseriesContent();
  inline bool hasTimeseriesContent();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getTimeseriesContent();
  inline void setTimeseriesContent( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setTimeseriesContent(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initTimeseriesContent(unsigned int size);
  inline void adoptTimeseriesContent(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownTimeseriesContent();

  inline bool isImageEmbedded();
  inline bool hasImageEmbedded();
  inline  ::capnp::Data::Builder getImageEmbedded();
  inline void setImageEmbedded( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initImageEmbedded(unsigned int size);
  inline void adoptImageEmbedded(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownImageEmbedded();

  inline bool isImageURL();
  inline bool hasImageURL();
  inline  ::capnp::Text::Builder getImageURL();
  inline void setImageURL( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initImageURL(unsigned int size);
  inline void adoptImageURL(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownImageURL();

  inline double getAlternatePositionX();
  inline void setAlternatePositionX(double value);

  inline double getAlternatePositionY();
  inline void setAlternatePositionY(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Annotation::Pipeline {
public:
  typedef Annotation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PowerSystemDataset::Reader {
public:
  typedef PowerSystemDataset Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasLines() const;
  inline  ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>::Reader getLines() const;

  inline bool hasGenerators() const;
  inline  ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>::Reader getGenerators() const;

  inline bool hasTransformers() const;
  inline  ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>::Reader getTransformers() const;

  inline bool hasFloorplan() const;
  inline  ::FloorPlan::Reader getFloorplan() const;

  inline bool hasAnnotations() const;
  inline  ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>::Reader getAnnotations() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PowerSystemDataset::Builder {
public:
  typedef PowerSystemDataset Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasLines();
  inline  ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>::Builder getLines();
  inline void setLines( ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>::Builder initLines(unsigned int size);
  inline void adoptLines(::capnp::Orphan< ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>> disownLines();

  inline bool hasGenerators();
  inline  ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>::Builder getGenerators();
  inline void setGenerators( ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>::Builder initGenerators(unsigned int size);
  inline void adoptGenerators(::capnp::Orphan< ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>> disownGenerators();

  inline bool hasTransformers();
  inline  ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>::Builder getTransformers();
  inline void setTransformers( ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>::Builder initTransformers(unsigned int size);
  inline void adoptTransformers(::capnp::Orphan< ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>> disownTransformers();

  inline bool hasFloorplan();
  inline  ::FloorPlan::Builder getFloorplan();
  inline void setFloorplan( ::FloorPlan::Reader value);
  inline  ::FloorPlan::Builder initFloorplan();
  inline void adoptFloorplan(::capnp::Orphan< ::FloorPlan>&& value);
  inline ::capnp::Orphan< ::FloorPlan> disownFloorplan();

  inline bool hasAnnotations();
  inline  ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>::Builder getAnnotations();
  inline void setAnnotations( ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>::Builder initAnnotations(unsigned int size);
  inline void adoptAnnotations(::capnp::Orphan< ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>> disownAnnotations();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PowerSystemDataset::Pipeline {
public:
  typedef PowerSystemDataset Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::FloorPlan::Pipeline getFloorplan();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline float GeneratorState::Reader::getVoltA() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float GeneratorState::Builder::getVoltA() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GeneratorState::Builder::setVoltA(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float GeneratorState::Reader::getVoltB() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float GeneratorState::Builder::getVoltB() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GeneratorState::Builder::setVoltB(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float GeneratorState::Reader::getVoltC() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float GeneratorState::Builder::getVoltC() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GeneratorState::Builder::setVoltC(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float GeneratorState::Reader::getAngleA() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float GeneratorState::Builder::getAngleA() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void GeneratorState::Builder::setAngleA(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float GeneratorState::Reader::getAngleB() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float GeneratorState::Builder::getAngleB() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void GeneratorState::Builder::setAngleB(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float GeneratorState::Reader::getAngleC() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float GeneratorState::Builder::getAngleC() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void GeneratorState::Builder::setAngleC(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float GeneratorState::Reader::getReal() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float GeneratorState::Builder::getReal() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void GeneratorState::Builder::setReal(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float GeneratorState::Reader::getReact() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float GeneratorState::Builder::getReact() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void GeneratorState::Builder::setReact(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Generator::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Generator::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Generator::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Generator::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Generator::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Generator::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Generator::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Generator::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Generator::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Generator::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Generator::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Generator::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Generator::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Generator::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Generator::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Generator::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Generator::Reader::hasFeeder() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Generator::Builder::hasFeeder() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Generator::Reader::getFeeder() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Generator::Builder::getFeeder() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Generator::Builder::setFeeder( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Generator::Builder::initFeeder(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Generator::Builder::adoptFeeder(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Generator::Builder::disownFeeder() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Generator::Reader::hasPhases() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Generator::Builder::hasPhases() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Generator::Reader::getPhases() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Generator::Builder::getPhases() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Generator::Builder::setPhases( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Generator::Builder::initPhases(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Generator::Builder::adoptPhases(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Generator::Builder::disownPhases() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline double Generator::Reader::getPositionX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Generator::Builder::getPositionX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Generator::Builder::setPositionX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Generator::Reader::getPositionY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Generator::Builder::getPositionY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Generator::Builder::setPositionY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Generator::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Generator::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>::Reader Generator::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>::Builder Generator::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Generator::Builder::setData( ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>::Builder Generator::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Generator::Builder::adoptData(
    ::capnp::Orphan< ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>> Generator::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::GeneratorState,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline double Generator::Reader::getVoltageDivisor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Generator::Builder::getVoltageDivisor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Generator::Builder::setVoltageDivisor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double Generator::Reader::getWattageDivisor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Generator::Builder::getWattageDivisor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Generator::Builder::setWattageDivisor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double Generator::Reader::getVarsDivisor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Generator::Builder::getVarsDivisor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Generator::Builder::setVarsDivisor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double Generator::Reader::getAlternatePositionX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double Generator::Builder::getAlternatePositionX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Generator::Builder::setAlternatePositionX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double Generator::Reader::getAlternatePositionY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double Generator::Builder::getAlternatePositionY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Generator::Builder::setAlternatePositionY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Generator::Reader::hasGeneratorTypes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Generator::Builder::hasGeneratorTypes() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>::Reader Generator::Reader::getGeneratorTypes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>::Builder Generator::Builder::getGeneratorTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Generator::Builder::setGeneratorTypes( ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Generator::Builder::setGeneratorTypes(::kj::ArrayPtr<const  ::GeneratorType> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>::Builder Generator::Builder::initGeneratorTypes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Generator::Builder::adoptGeneratorTypes(
    ::capnp::Orphan< ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>> Generator::Builder::disownGeneratorTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::GeneratorType,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline float TransformerState::Reader::getVoltAFrom() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float TransformerState::Builder::getVoltAFrom() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TransformerState::Builder::setVoltAFrom(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float TransformerState::Reader::getVoltBFrom() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float TransformerState::Builder::getVoltBFrom() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TransformerState::Builder::setVoltBFrom(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float TransformerState::Reader::getVoltCFrom() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float TransformerState::Builder::getVoltCFrom() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TransformerState::Builder::setVoltCFrom(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float TransformerState::Reader::getVoltATo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float TransformerState::Builder::getVoltATo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TransformerState::Builder::setVoltATo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float TransformerState::Reader::getVoltBTo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float TransformerState::Builder::getVoltBTo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TransformerState::Builder::setVoltBTo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float TransformerState::Reader::getVoltCTo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float TransformerState::Builder::getVoltCTo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TransformerState::Builder::setVoltCTo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TransformerState::Reader::getTapA() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TransformerState::Builder::getTapA() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void TransformerState::Builder::setTapA( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TransformerState::Reader::getTapB() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TransformerState::Builder::getTapB() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void TransformerState::Builder::setTapB( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TransformerState::Reader::getTapC() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TransformerState::Builder::getTapC() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void TransformerState::Builder::setTapC( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TransformerState::Reader::getTapChangesA() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TransformerState::Builder::getTapChangesA() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void TransformerState::Builder::setTapChangesA( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TransformerState::Reader::getTapChangesB() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TransformerState::Builder::getTapChangesB() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void TransformerState::Builder::setTapChangesB( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TransformerState::Reader::getTapChangesC() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TransformerState::Builder::getTapChangesC() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void TransformerState::Builder::setTapChangesC( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool Transformer::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Transformer::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Transformer::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Transformer::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Transformer::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Transformer::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Transformer::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Transformer::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Transformer::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Transformer::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Transformer::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Transformer::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Transformer::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Transformer::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Transformer::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Transformer::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Transformer::Reader::hasFeeder() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Transformer::Builder::hasFeeder() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Transformer::Reader::getFeeder() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Transformer::Builder::getFeeder() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Transformer::Builder::setFeeder( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Transformer::Builder::initFeeder(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Transformer::Builder::adoptFeeder(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Transformer::Builder::disownFeeder() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline double Transformer::Reader::getPositionX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Transformer::Builder::getPositionX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Transformer::Builder::setPositionX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Transformer::Reader::getPositionY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Transformer::Builder::getPositionY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Transformer::Builder::setPositionY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Transformer::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Transformer::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>::Reader Transformer::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>::Builder Transformer::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Transformer::Builder::setData( ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>::Builder Transformer::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Transformer::Builder::adoptData(
    ::capnp::Orphan< ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>> Transformer::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TransformerState,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Transformer::Reader::hasToNode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Transformer::Builder::hasToNode() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Transformer::Reader::getToNode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Transformer::Builder::getToNode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Transformer::Builder::setToNode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Transformer::Builder::initToNode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Transformer::Builder::adoptToNode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Transformer::Builder::disownToNode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Transformer::Reader::hasFromNode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Transformer::Builder::hasFromNode() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Transformer::Reader::getFromNode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Transformer::Builder::getFromNode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Transformer::Builder::setFromNode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Transformer::Builder::initFromNode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Transformer::Builder::adoptFromNode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Transformer::Builder::disownFromNode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline double Transformer::Reader::getVoltageDivisor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Transformer::Builder::getVoltageDivisor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Transformer::Builder::setVoltageDivisor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double Transformer::Reader::getWattageDivisor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Transformer::Builder::getWattageDivisor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Transformer::Builder::setWattageDivisor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double Transformer::Reader::getVarsDivisor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Transformer::Builder::getVarsDivisor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Transformer::Builder::setVarsDivisor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double Transformer::Reader::getAlternatePositionX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double Transformer::Builder::getAlternatePositionX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Transformer::Builder::setAlternatePositionX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double Transformer::Reader::getAlternatePositionY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double Transformer::Builder::getAlternatePositionY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Transformer::Builder::setAlternatePositionY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getVoltAFrom() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getVoltAFrom() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setVoltAFrom(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getVoltBFrom() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getVoltBFrom() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setVoltBFrom(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getVoltCFrom() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getVoltCFrom() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setVoltCFrom(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getVoltATo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getVoltATo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setVoltATo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getVoltBTo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getVoltBTo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setVoltBTo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getVoltCTo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getVoltCTo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setVoltCTo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getRealAFrom() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getRealAFrom() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setRealAFrom(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getRealBFrom() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getRealBFrom() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setRealBFrom(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getRealCFrom() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getRealCFrom() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setRealCFrom(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getRealATo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getRealATo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setRealATo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getRealBTo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getRealBTo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setRealBTo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getRealCTo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getRealCTo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setRealCTo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getReactAFrom() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getReactAFrom() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setReactAFrom(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getReactBFrom() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getReactBFrom() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setReactBFrom(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getReactCFrom() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getReactCFrom() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setReactCFrom(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getReactATo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getReactATo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setReactATo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getReactBTo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getReactBTo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setReactBTo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getReactCTo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getReactCTo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setReactCTo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getLineLoadRealA() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getLineLoadRealA() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setLineLoadRealA(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getLineLoadRealB() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getLineLoadRealB() {
  return _builder.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setLineLoadRealB(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline float LineState::Reader::getLineLoadRealC() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float LineState::Builder::getLineLoadRealC() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void LineState::Builder::setLineLoadRealC(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool Line::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Line::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Line::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Line::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Line::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Line::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Line::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Line::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Line::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Line::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Line::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Line::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Line::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Line::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Line::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Line::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Line::Reader::hasFeeder() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Line::Builder::hasFeeder() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Line::Reader::getFeeder() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Line::Builder::getFeeder() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Line::Builder::setFeeder( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Line::Builder::initFeeder(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Line::Builder::adoptFeeder(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Line::Builder::disownFeeder() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Line::Reader::hasPhases() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Line::Builder::hasPhases() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Line::Reader::getPhases() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Line::Builder::getPhases() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Line::Builder::setPhases( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Line::Builder::initPhases(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Line::Builder::adoptPhases(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Line::Builder::disownPhases() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Line::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Line::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>::Reader Line::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>::Builder Line::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Line::Builder::setData( ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>::Builder Line::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Line::Builder::adoptData(
    ::capnp::Orphan< ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>> Line::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LineState,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Line::Reader::hasToNode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Line::Builder::hasToNode() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Line::Reader::getToNode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Line::Builder::getToNode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Line::Builder::setToNode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Line::Builder::initToNode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Line::Builder::adoptToNode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Line::Builder::disownToNode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Line::Reader::hasFromNode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Line::Builder::hasFromNode() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Line::Reader::getFromNode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Line::Builder::getFromNode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Line::Builder::setFromNode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Line::Builder::initFromNode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Line::Builder::adoptFromNode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Line::Builder::disownFromNode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline double Line::Reader::getLength() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Line::Builder::getLength() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Line::Builder::setLength(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Line::Reader::getDistanceA() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Line::Builder::getDistanceA() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Line::Builder::setDistanceA(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Line::Reader::getDistanceB() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Line::Builder::getDistanceB() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Line::Builder::setDistanceB(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Line::Reader::getPositionStartX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double Line::Builder::getPositionStartX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Line::Builder::setPositionStartX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double Line::Reader::getPositionStartY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double Line::Builder::getPositionStartY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Line::Builder::setPositionStartY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double Line::Reader::getPositionEndX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double Line::Builder::getPositionEndX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Line::Builder::setPositionEndX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double Line::Reader::getPositionEndY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double Line::Builder::getPositionEndY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Line::Builder::setPositionEndY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double Line::Reader::getVoltageDivisor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Line::Builder::getVoltageDivisor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Line::Builder::setVoltageDivisor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double Line::Reader::getWattageDivisor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Line::Builder::getWattageDivisor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Line::Builder::setWattageDivisor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double Line::Reader::getVarsDivisor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Line::Builder::getVarsDivisor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Line::Builder::setVarsDivisor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double Line::Reader::getMaxReal() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Line::Builder::getMaxReal() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Line::Builder::setMaxReal(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double Line::Reader::getAlternatePositionStartX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double Line::Builder::getAlternatePositionStartX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Line::Builder::setAlternatePositionStartX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double Line::Reader::getAlternatePositionStartY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline double Line::Builder::getAlternatePositionStartY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Line::Builder::setAlternatePositionStartY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline double Line::Reader::getAlternatePositionEndX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline double Line::Builder::getAlternatePositionEndX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Line::Builder::setAlternatePositionEndX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline double Line::Reader::getAlternatePositionEndY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline double Line::Builder::getAlternatePositionEndY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Line::Builder::setAlternatePositionEndY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::FloorPlan::Which FloorPlan::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline  ::FloorPlan::Which FloorPlan::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline double FloorPlan::Reader::getLowerLeftX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double FloorPlan::Builder::getLowerLeftX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FloorPlan::Builder::setLowerLeftX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double FloorPlan::Reader::getLowerLeftY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double FloorPlan::Builder::getLowerLeftY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FloorPlan::Builder::setLowerLeftY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double FloorPlan::Reader::getUpperRightX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double FloorPlan::Builder::getUpperRightX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FloorPlan::Builder::setUpperRightX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double FloorPlan::Reader::getUpperRightY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double FloorPlan::Builder::getUpperRightY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void FloorPlan::Builder::setUpperRightY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool FloorPlan::Reader::isImageEmbedded() const {
  return which() == FloorPlan::IMAGE_EMBEDDED;
}
inline bool FloorPlan::Builder::isImageEmbedded() {
  return which() == FloorPlan::IMAGE_EMBEDDED;
}
inline bool FloorPlan::Reader::hasImageEmbedded() const {
  if (which() != FloorPlan::IMAGE_EMBEDDED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FloorPlan::Builder::hasImageEmbedded() {
  if (which() != FloorPlan::IMAGE_EMBEDDED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader FloorPlan::Reader::getImageEmbedded() const {
  KJ_IREQUIRE((which() == FloorPlan::IMAGE_EMBEDDED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder FloorPlan::Builder::getImageEmbedded() {
  KJ_IREQUIRE((which() == FloorPlan::IMAGE_EMBEDDED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FloorPlan::Builder::setImageEmbedded( ::capnp::Data::Reader value) {
  _builder.setDataField<FloorPlan::Which>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, FloorPlan::IMAGE_EMBEDDED);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder FloorPlan::Builder::initImageEmbedded(unsigned int size) {
  _builder.setDataField<FloorPlan::Which>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, FloorPlan::IMAGE_EMBEDDED);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FloorPlan::Builder::adoptImageEmbedded(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<FloorPlan::Which>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, FloorPlan::IMAGE_EMBEDDED);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> FloorPlan::Builder::disownImageEmbedded() {
  KJ_IREQUIRE((which() == FloorPlan::IMAGE_EMBEDDED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FloorPlan::Reader::isImageURL() const {
  return which() == FloorPlan::IMAGE_U_R_L;
}
inline bool FloorPlan::Builder::isImageURL() {
  return which() == FloorPlan::IMAGE_U_R_L;
}
inline bool FloorPlan::Reader::hasImageURL() const {
  if (which() != FloorPlan::IMAGE_U_R_L) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FloorPlan::Builder::hasImageURL() {
  if (which() != FloorPlan::IMAGE_U_R_L) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FloorPlan::Reader::getImageURL() const {
  KJ_IREQUIRE((which() == FloorPlan::IMAGE_U_R_L),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FloorPlan::Builder::getImageURL() {
  KJ_IREQUIRE((which() == FloorPlan::IMAGE_U_R_L),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FloorPlan::Builder::setImageURL( ::capnp::Text::Reader value) {
  _builder.setDataField<FloorPlan::Which>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, FloorPlan::IMAGE_U_R_L);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FloorPlan::Builder::initImageURL(unsigned int size) {
  _builder.setDataField<FloorPlan::Which>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, FloorPlan::IMAGE_U_R_L);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FloorPlan::Builder::adoptImageURL(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<FloorPlan::Which>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, FloorPlan::IMAGE_U_R_L);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FloorPlan::Builder::disownImageURL() {
  KJ_IREQUIRE((which() == FloorPlan::IMAGE_U_R_L),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::Annotation::Which Annotation::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline  ::Annotation::Which Annotation::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double Annotation::Reader::getPositionX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Annotation::Builder::getPositionX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Annotation::Builder::setPositionX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Annotation::Reader::getPositionY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Annotation::Builder::getPositionY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Annotation::Builder::setPositionY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Annotation::Reader::isFixedContent() const {
  return which() == Annotation::FIXED_CONTENT;
}
inline bool Annotation::Builder::isFixedContent() {
  return which() == Annotation::FIXED_CONTENT;
}
inline bool Annotation::Reader::hasFixedContent() const {
  if (which() != Annotation::FIXED_CONTENT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Annotation::Builder::hasFixedContent() {
  if (which() != Annotation::FIXED_CONTENT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Annotation::Reader::getFixedContent() const {
  KJ_IREQUIRE((which() == Annotation::FIXED_CONTENT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Annotation::Builder::getFixedContent() {
  KJ_IREQUIRE((which() == Annotation::FIXED_CONTENT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Annotation::Builder::setFixedContent( ::capnp::Text::Reader value) {
  _builder.setDataField<Annotation::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Annotation::FIXED_CONTENT);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Annotation::Builder::initFixedContent(unsigned int size) {
  _builder.setDataField<Annotation::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Annotation::FIXED_CONTENT);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Annotation::Builder::adoptFixedContent(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Annotation::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Annotation::FIXED_CONTENT);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Annotation::Builder::disownFixedContent() {
  KJ_IREQUIRE((which() == Annotation::FIXED_CONTENT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Annotation::Reader::isTimeseriesContent() const {
  return which() == Annotation::TIMESERIES_CONTENT;
}
inline bool Annotation::Builder::isTimeseriesContent() {
  return which() == Annotation::TIMESERIES_CONTENT;
}
inline bool Annotation::Reader::hasTimeseriesContent() const {
  if (which() != Annotation::TIMESERIES_CONTENT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Annotation::Builder::hasTimeseriesContent() {
  if (which() != Annotation::TIMESERIES_CONTENT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader Annotation::Reader::getTimeseriesContent() const {
  KJ_IREQUIRE((which() == Annotation::TIMESERIES_CONTENT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Annotation::Builder::getTimeseriesContent() {
  KJ_IREQUIRE((which() == Annotation::TIMESERIES_CONTENT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Annotation::Builder::setTimeseriesContent( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  _builder.setDataField<Annotation::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Annotation::TIMESERIES_CONTENT);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Annotation::Builder::setTimeseriesContent(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  _builder.setDataField<Annotation::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Annotation::TIMESERIES_CONTENT);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Annotation::Builder::initTimeseriesContent(unsigned int size) {
  _builder.setDataField<Annotation::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Annotation::TIMESERIES_CONTENT);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Annotation::Builder::adoptTimeseriesContent(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  _builder.setDataField<Annotation::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Annotation::TIMESERIES_CONTENT);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> Annotation::Builder::disownTimeseriesContent() {
  KJ_IREQUIRE((which() == Annotation::TIMESERIES_CONTENT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Annotation::Reader::isImageEmbedded() const {
  return which() == Annotation::IMAGE_EMBEDDED;
}
inline bool Annotation::Builder::isImageEmbedded() {
  return which() == Annotation::IMAGE_EMBEDDED;
}
inline bool Annotation::Reader::hasImageEmbedded() const {
  if (which() != Annotation::IMAGE_EMBEDDED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Annotation::Builder::hasImageEmbedded() {
  if (which() != Annotation::IMAGE_EMBEDDED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Annotation::Reader::getImageEmbedded() const {
  KJ_IREQUIRE((which() == Annotation::IMAGE_EMBEDDED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Annotation::Builder::getImageEmbedded() {
  KJ_IREQUIRE((which() == Annotation::IMAGE_EMBEDDED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Annotation::Builder::setImageEmbedded( ::capnp::Data::Reader value) {
  _builder.setDataField<Annotation::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Annotation::IMAGE_EMBEDDED);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Annotation::Builder::initImageEmbedded(unsigned int size) {
  _builder.setDataField<Annotation::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Annotation::IMAGE_EMBEDDED);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Annotation::Builder::adoptImageEmbedded(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Annotation::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Annotation::IMAGE_EMBEDDED);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Annotation::Builder::disownImageEmbedded() {
  KJ_IREQUIRE((which() == Annotation::IMAGE_EMBEDDED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Annotation::Reader::isImageURL() const {
  return which() == Annotation::IMAGE_U_R_L;
}
inline bool Annotation::Builder::isImageURL() {
  return which() == Annotation::IMAGE_U_R_L;
}
inline bool Annotation::Reader::hasImageURL() const {
  if (which() != Annotation::IMAGE_U_R_L) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Annotation::Builder::hasImageURL() {
  if (which() != Annotation::IMAGE_U_R_L) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Annotation::Reader::getImageURL() const {
  KJ_IREQUIRE((which() == Annotation::IMAGE_U_R_L),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Annotation::Builder::getImageURL() {
  KJ_IREQUIRE((which() == Annotation::IMAGE_U_R_L),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Annotation::Builder::setImageURL( ::capnp::Text::Reader value) {
  _builder.setDataField<Annotation::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Annotation::IMAGE_U_R_L);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Annotation::Builder::initImageURL(unsigned int size) {
  _builder.setDataField<Annotation::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Annotation::IMAGE_U_R_L);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Annotation::Builder::adoptImageURL(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Annotation::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, Annotation::IMAGE_U_R_L);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Annotation::Builder::disownImageURL() {
  KJ_IREQUIRE((which() == Annotation::IMAGE_U_R_L),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double Annotation::Reader::getAlternatePositionX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double Annotation::Builder::getAlternatePositionX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Annotation::Builder::setAlternatePositionX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double Annotation::Reader::getAlternatePositionY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double Annotation::Builder::getAlternatePositionY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Annotation::Builder::setAlternatePositionY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool PowerSystemDataset::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PowerSystemDataset::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PowerSystemDataset::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PowerSystemDataset::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PowerSystemDataset::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PowerSystemDataset::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PowerSystemDataset::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PowerSystemDataset::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PowerSystemDataset::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PowerSystemDataset::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PowerSystemDataset::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PowerSystemDataset::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PowerSystemDataset::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PowerSystemDataset::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PowerSystemDataset::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PowerSystemDataset::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PowerSystemDataset::Reader::hasLines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PowerSystemDataset::Builder::hasLines() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>::Reader PowerSystemDataset::Reader::getLines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>::Builder PowerSystemDataset::Builder::getLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PowerSystemDataset::Builder::setLines( ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>::Builder PowerSystemDataset::Builder::initLines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void PowerSystemDataset::Builder::adoptLines(
    ::capnp::Orphan< ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>> PowerSystemDataset::Builder::disownLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Line,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool PowerSystemDataset::Reader::hasGenerators() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PowerSystemDataset::Builder::hasGenerators() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>::Reader PowerSystemDataset::Reader::getGenerators() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>::Builder PowerSystemDataset::Builder::getGenerators() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PowerSystemDataset::Builder::setGenerators( ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>::Builder PowerSystemDataset::Builder::initGenerators(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void PowerSystemDataset::Builder::adoptGenerators(
    ::capnp::Orphan< ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>> PowerSystemDataset::Builder::disownGenerators() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Generator,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool PowerSystemDataset::Reader::hasTransformers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool PowerSystemDataset::Builder::hasTransformers() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>::Reader PowerSystemDataset::Reader::getTransformers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>::Builder PowerSystemDataset::Builder::getTransformers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void PowerSystemDataset::Builder::setTransformers( ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>::Builder PowerSystemDataset::Builder::initTransformers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void PowerSystemDataset::Builder::adoptTransformers(
    ::capnp::Orphan< ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>> PowerSystemDataset::Builder::disownTransformers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Transformer,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool PowerSystemDataset::Reader::hasFloorplan() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool PowerSystemDataset::Builder::hasFloorplan() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::FloorPlan::Reader PowerSystemDataset::Reader::getFloorplan() const {
  return ::capnp::_::PointerHelpers< ::FloorPlan>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::FloorPlan::Builder PowerSystemDataset::Builder::getFloorplan() {
  return ::capnp::_::PointerHelpers< ::FloorPlan>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::FloorPlan::Pipeline PowerSystemDataset::Pipeline::getFloorplan() {
  return  ::FloorPlan::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void PowerSystemDataset::Builder::setFloorplan( ::FloorPlan::Reader value) {
  ::capnp::_::PointerHelpers< ::FloorPlan>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::FloorPlan::Builder PowerSystemDataset::Builder::initFloorplan() {
  return ::capnp::_::PointerHelpers< ::FloorPlan>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void PowerSystemDataset::Builder::adoptFloorplan(
    ::capnp::Orphan< ::FloorPlan>&& value) {
  ::capnp::_::PointerHelpers< ::FloorPlan>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::FloorPlan> PowerSystemDataset::Builder::disownFloorplan() {
  return ::capnp::_::PointerHelpers< ::FloorPlan>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool PowerSystemDataset::Reader::hasAnnotations() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool PowerSystemDataset::Builder::hasAnnotations() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>::Reader PowerSystemDataset::Reader::getAnnotations() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>::Builder PowerSystemDataset::Builder::getAnnotations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void PowerSystemDataset::Builder::setAnnotations( ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>::Builder PowerSystemDataset::Builder::initAnnotations(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void PowerSystemDataset::Builder::adoptAnnotations(
    ::capnp::Orphan< ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>> PowerSystemDataset::Builder::disownAnnotations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Annotation,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

